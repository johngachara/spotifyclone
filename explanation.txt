This project is a Django-based web application that integrates with the Spotify API, allowing users to connect their Spotify accounts and perform various actions such as fetching recently played tracks, viewing saved playlists and albums, controlling playback, and searching for music. Key Features 1. Authentication Flow The application uses the OAuth2.0 authentication flow to enable users to connect their Spotify accounts securely. The index function initiates the authorization process, and redirectt handles the redirection after successful authorization. The refresh_token function is responsible for refreshing access tokens. 2. Recently Played and Featured Playlists The redirectt function fetches the user's recently played tracks and featured playlists using the obtained access token. The data is processed and displayed on the 'red.html' template. 3. Saved Playlists and Albums The savedpage function retrieves the user's saved playlists and albums, presenting them on the 'saved.html' template. 4. Playback Controls Functions like play_song, pause_song, skip_to_next, and skip_to_previous provide controls for playback on the user's Spotify account. 5. Album and Playlist Pages The album_page and playlist_page functions fetch tracks from a specific album or playlist, displaying them on the 'albums.html' template. 6. Search Functionality The search_view function allows users to search for tracks, albums, artists, or playlists, presenting the results on the 'search.html' template. Web Playback SDK Integration To enhance the user experience, the application incorporates the Spotify Web Playback SDK. This JavaScript SDK enables seamless music playback directly within the web interface. The 'red.html' template includes the necessary SDK script and initializes a player through the connect button.
